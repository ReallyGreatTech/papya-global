name: Dev-Papya-Global CI/CD Pipeline

on:
  push:
    branches: [master]

env:
  BUILD_ENV_FILE_SCRIPT: "${{ github.workspace }}/build-env.py"
  SECRET_NAME: "papyagloba/dev"
  APP_DIR: "${{ github.workspace }}"

jobs:
  build-and-push-ecr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set unique Docker image tag
        id: set-tag
        run: echo "::set-output name=TAG::$(date '+%Y%m%d%H%M%S')-${{ github.run_id }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

      - name: Generate .env from secret manager
        run: |
          pip3 install boto3
          cd ${APP_DIR}/deploy-package
          python3 ${BUILD_ENV_FILE_SCRIPT} "${APP_DIR}/deploy-package/.env" "${SECRET_NAME}" eu-north-1

        #Documentation for below action https://github.com/appleboy/scp-action
      - name: 1 SCP .env to server one
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          port: ${{ secrets.EC2_SSH_PORT }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "${{ github.workspace }}/deploy-package/.env"
          target: papyaglobal
          strip_components: 3

      - name: 2 SCP docker compose to server one
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          port: ${{ secrets.EC2_SSH_PORT }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "${{ github.workspace }}/docker-compose.yml"
          target: papyaglobal
          strip_components: 3

      - name: Build and Push Docker Image to ECR
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/papyaglobal-dev:${{ steps.set-tag.outputs.TAG }}, ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/papyaglobal-dev:latest

  setup_server_one:
    runs-on: ubuntu-latest
    steps:
      - name: Setup AWS CLI
        uses: appleboy/ssh-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION
          script: |
            if command -v aws &> /dev/null; then
              echo "AWS CLI is already installed."
            else
              echo "Installing AWS CLI..."
              sudo apt-get update
              sudo apt-get install -y awscli
              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
              aws configure set default.region $AWS_DEFAULT_REGION
              aws configure set default.output json
            fi

  deploy_to_server_one:
    runs-on: ubuntu-latest

    needs:
      - build-and-push-ecr
      - setup_server_one

    steps:
      - name: Restart Docker Compose
        uses: appleboy/ssh-action@master
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          envs: AWS_ACCOUNT_ID
          script: |
            cd ~/papyaglobal
            docker compose down
            docker rmi $(docker images -aq)
            ECR_REPOSITORY="$AWS_ACCOUNT_ID.dkr.ecr.eu-north-1.amazonaws.com/papyaglobal-dev:latest"
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.eu-north-1.amazonaws.com
            docker pull $ECR_REPOSITORY
            export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
            docker compose up -d --build

  setup_server_two:
    runs-on: ubuntu-latest
    steps:
      - name: Setup AWS CLI
        uses: appleboy/ssh-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1
        with:
          host: ${{ secrets.EC2_HOST_SERVER_TWO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_SERVER_TWO }}
          port: ${{ secrets.EC2_SSH_PORT }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION
          script: |
            if command -v aws &> /dev/null; then
              echo "AWS CLI is already installed."
            else
              echo "Installing AWS CLI..."
              sudo apt-get update
              sudo apt-get install -y awscli
              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
              aws configure set default.region $AWS_DEFAULT_REGION
              aws configure set default.output json
            fi

  deploy_to_server_two:
    runs-on: ubuntu-latest

    needs:
      - build-and-push-ecr
      - setup_server_two

    steps:
      - name: Restart Docker Compose
        uses: appleboy/ssh-action@master
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        with:
          host: ${{ secrets.EC2_HOST_SERVER_TWO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_SERVER_TWO }}
          port: ${{ secrets.EC2_SSH_PORT }}
          envs: AWS_ACCOUNT_ID
          script: |
            cd ~/papyaglobal
            docker compose down
            docker rmi -f $(docker images -aq)
            ECR_REPOSITORY="$AWS_ACCOUNT_ID.dkr.ecr.eu-north-1.amazonaws.com/papyaglobal-dev:latest"
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.eu-north-1.amazonaws.com
            docker pull $ECR_REPOSITORY
            export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
            docker compose up -d --build
